// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render 1`] = `
<SafeAreaProvider>
  <ApolloProvider
    client={
      ApolloClient {
        "cache": InMemoryCache {
          "addTypename": true,
          "addTypenameTransform": DocumentTransform {
            "resultCache": WeakSet {},
            "stableCacheKeys": Trie {
              "makeData": [Function],
              "weakness": true,
            },
            "transform": [Function],
          },
          "assumeImmutableResults": true,
          "config": {
            "addTypename": true,
            "canonizeResults": false,
            "dataIdFromObject": [Function],
            "resultCaching": true,
          },
          "data": Root {
            "canRead": [Function],
            "data": {},
            "getFieldValue": [Function],
            "group": CacheGroup {
              "caching": true,
              "d": [Function],
              "keyMaker": Trie {
                "makeData": [Function],
                "weakness": true,
              },
              "parent": null,
            },
            "policies": Policies {
              "cache": [Circular],
              "config": {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": undefined,
              },
              "fuzzySubtypes": Map {},
              "rootIdsByTypename": {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "supertypeMap": Map {},
              "toBeAdded": {},
              "typePolicies": {},
              "usingPossibleTypes": false,
            },
            "refs": {},
            "rootIds": {},
            "storageTrie": Trie {
              "makeData": [Function],
              "weakness": true,
            },
            "stump": Stump {
              "canRead": [Function],
              "data": {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": Trie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "parent": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "parent": null,
                },
              },
              "id": "EntityStore.Stump",
              "parent": [Circular],
              "policies": Policies {
                "cache": [Circular],
                "config": {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": undefined,
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": {},
                "typePolicies": {},
                "usingPossibleTypes": false,
              },
              "refs": {},
              "replay": [Function],
              "rootIds": {},
              "toReference": [Function],
            },
            "toReference": [Function],
          },
          "getFragmentDoc": [Function],
          "makeVar": [Function],
          "maybeBroadcastWatch": [Function],
          "optimisticData": Stump {
            "canRead": [Function],
            "data": {},
            "getFieldValue": [Function],
            "group": CacheGroup {
              "caching": true,
              "d": [Function],
              "keyMaker": Trie {
                "makeData": [Function],
                "weakness": true,
              },
              "parent": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": Trie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "parent": null,
              },
            },
            "id": "EntityStore.Stump",
            "parent": Root {
              "canRead": [Function],
              "data": {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": Trie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "parent": null,
              },
              "policies": Policies {
                "cache": [Circular],
                "config": {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": undefined,
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": {},
                "typePolicies": {},
                "usingPossibleTypes": false,
              },
              "refs": {},
              "rootIds": {},
              "storageTrie": Trie {
                "makeData": [Function],
                "weakness": true,
              },
              "stump": [Circular],
              "toReference": [Function],
            },
            "policies": Policies {
              "cache": [Circular],
              "config": {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": undefined,
              },
              "fuzzySubtypes": Map {},
              "rootIdsByTypename": {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "supertypeMap": Map {},
              "toBeAdded": {},
              "typePolicies": {},
              "usingPossibleTypes": false,
            },
            "refs": {},
            "replay": [Function],
            "rootIds": {},
            "toReference": [Function],
          },
          "policies": Policies {
            "cache": [Circular],
            "config": {
              "cache": [Circular],
              "dataIdFromObject": [Function],
              "possibleTypes": undefined,
              "typePolicies": undefined,
            },
            "fuzzySubtypes": Map {},
            "rootIdsByTypename": {
              "Mutation": "ROOT_MUTATION",
              "Query": "ROOT_QUERY",
              "Subscription": "ROOT_SUBSCRIPTION",
            },
            "rootTypenamesById": {
              "ROOT_MUTATION": "Mutation",
              "ROOT_QUERY": "Query",
              "ROOT_SUBSCRIPTION": "Subscription",
            },
            "supertypeMap": Map {},
            "toBeAdded": {},
            "typePolicies": {},
            "usingPossibleTypes": false,
          },
          "storeReader": StoreReader {
            "canon": ObjectCanon {
              "empty": {},
              "keysByJSON": Map {
                "[]" => {
                  "json": "[]",
                  "sorted": [],
                },
              },
              "known": WeakSet {},
              "passes": WeakMap {},
              "pool": Trie {
                "data": {
                  "keys": {
                    "json": "[]",
                    "sorted": [],
                  },
                },
                "makeData": [Function],
                "weak": WeakMap {},
                "weakness": true,
              },
            },
            "config": {
              "addTypename": true,
              "cache": [Circular],
              "canonizeResults": false,
            },
            "executeSelectionSet": [Function],
            "executeSubSelectedArray": [Function],
            "knownResults": WeakMap {},
          },
          "storeWriter": StoreWriter {
            "cache": [Circular],
            "fragments": undefined,
            "reader": StoreReader {
              "canon": ObjectCanon {
                "empty": {},
                "keysByJSON": Map {
                  "[]" => {
                    "json": "[]",
                    "sorted": [],
                  },
                },
                "known": WeakSet {},
                "passes": WeakMap {},
                "pool": Trie {
                  "data": {
                    "keys": {
                      "json": "[]",
                      "sorted": [],
                    },
                  },
                  "makeData": [Function],
                  "weak": WeakMap {},
                  "weakness": true,
                },
              },
              "config": {
                "addTypename": true,
                "cache": [Circular],
                "canonizeResults": false,
              },
              "executeSelectionSet": [Function],
              "executeSubSelectedArray": [Function],
              "knownResults": WeakMap {},
            },
          },
          "txCount": 0,
          "watches": Set {},
        },
        "clearStoreCallbacks": [],
        "defaultOptions": {},
        "disableNetworkFetches": false,
        "link": HttpLink {
          "options": {
            "credentials": undefined,
            "headers": undefined,
            "uri": "https://countries.trevorblades.com/graphql",
          },
          "request": [Function],
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "addTypename": true,
            "addTypenameTransform": DocumentTransform {
              "resultCache": WeakSet {},
              "stableCacheKeys": Trie {
                "makeData": [Function],
                "weakness": true,
              },
              "transform": [Function],
            },
            "assumeImmutableResults": true,
            "config": {
              "addTypename": true,
              "canonizeResults": false,
              "dataIdFromObject": [Function],
              "resultCaching": true,
            },
            "data": Root {
              "canRead": [Function],
              "data": {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": Trie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "parent": null,
              },
              "policies": Policies {
                "cache": [Circular],
                "config": {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": undefined,
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": {},
                "typePolicies": {},
                "usingPossibleTypes": false,
              },
              "refs": {},
              "rootIds": {},
              "storageTrie": Trie {
                "makeData": [Function],
                "weakness": true,
              },
              "stump": Stump {
                "canRead": [Function],
                "data": {},
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "parent": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "parent": null,
                  },
                },
                "id": "EntityStore.Stump",
                "parent": [Circular],
                "policies": Policies {
                  "cache": [Circular],
                  "config": {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": undefined,
                  },
                  "fuzzySubtypes": Map {},
                  "rootIdsByTypename": {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "supertypeMap": Map {},
                  "toBeAdded": {},
                  "typePolicies": {},
                  "usingPossibleTypes": false,
                },
                "refs": {},
                "replay": [Function],
                "rootIds": {},
                "toReference": [Function],
              },
              "toReference": [Function],
            },
            "getFragmentDoc": [Function],
            "makeVar": [Function],
            "maybeBroadcastWatch": [Function],
            "optimisticData": Stump {
              "canRead": [Function],
              "data": {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": Trie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "parent": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "parent": null,
                },
              },
              "id": "EntityStore.Stump",
              "parent": Root {
                "canRead": [Function],
                "data": {},
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "parent": null,
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": undefined,
                  },
                  "fuzzySubtypes": Map {},
                  "rootIdsByTypename": {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "supertypeMap": Map {},
                  "toBeAdded": {},
                  "typePolicies": {},
                  "usingPossibleTypes": false,
                },
                "refs": {},
                "rootIds": {},
                "storageTrie": Trie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "stump": [Circular],
                "toReference": [Function],
              },
              "policies": Policies {
                "cache": [Circular],
                "config": {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": undefined,
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": {},
                "typePolicies": {},
                "usingPossibleTypes": false,
              },
              "refs": {},
              "replay": [Function],
              "rootIds": {},
              "toReference": [Function],
            },
            "policies": Policies {
              "cache": [Circular],
              "config": {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": undefined,
              },
              "fuzzySubtypes": Map {},
              "rootIdsByTypename": {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "supertypeMap": Map {},
              "toBeAdded": {},
              "typePolicies": {},
              "usingPossibleTypes": false,
            },
            "storeReader": StoreReader {
              "canon": ObjectCanon {
                "empty": {},
                "keysByJSON": Map {
                  "[]" => {
                    "json": "[]",
                    "sorted": [],
                  },
                },
                "known": WeakSet {},
                "passes": WeakMap {},
                "pool": Trie {
                  "data": {
                    "keys": {
                      "json": "[]",
                      "sorted": [],
                    },
                  },
                  "makeData": [Function],
                  "weak": WeakMap {},
                  "weakness": true,
                },
              },
              "config": {
                "addTypename": true,
                "cache": [Circular],
                "canonizeResults": false,
              },
              "executeSelectionSet": [Function],
              "executeSubSelectedArray": [Function],
              "knownResults": WeakMap {},
            },
            "storeWriter": StoreWriter {
              "cache": [Circular],
              "fragments": undefined,
              "reader": StoreReader {
                "canon": ObjectCanon {
                  "empty": {},
                  "keysByJSON": Map {
                    "[]" => {
                      "json": "[]",
                      "sorted": [],
                    },
                  },
                  "known": WeakSet {},
                  "passes": WeakMap {},
                  "pool": Trie {
                    "data": {
                      "keys": {
                        "json": "[]",
                        "sorted": [],
                      },
                    },
                    "makeData": [Function],
                    "weak": WeakMap {},
                    "weakness": true,
                  },
                },
                "config": {
                  "addTypename": true,
                  "cache": [Circular],
                  "canonizeResults": false,
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
            },
            "txCount": 0,
            "watches": Set {},
          },
          "client": [Circular],
          "selectionsToResolveCache": WeakMap {},
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "queryManager": QueryManager {
          "assumeImmutableResults": true,
          "cache": InMemoryCache {
            "addTypename": true,
            "addTypenameTransform": DocumentTransform {
              "resultCache": WeakSet {},
              "stableCacheKeys": Trie {
                "makeData": [Function],
                "weakness": true,
              },
              "transform": [Function],
            },
            "assumeImmutableResults": true,
            "config": {
              "addTypename": true,
              "canonizeResults": false,
              "dataIdFromObject": [Function],
              "resultCaching": true,
            },
            "data": Root {
              "canRead": [Function],
              "data": {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": Trie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "parent": null,
              },
              "policies": Policies {
                "cache": [Circular],
                "config": {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": undefined,
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": {},
                "typePolicies": {},
                "usingPossibleTypes": false,
              },
              "refs": {},
              "rootIds": {},
              "storageTrie": Trie {
                "makeData": [Function],
                "weakness": true,
              },
              "stump": Stump {
                "canRead": [Function],
                "data": {},
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "parent": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "parent": null,
                  },
                },
                "id": "EntityStore.Stump",
                "parent": [Circular],
                "policies": Policies {
                  "cache": [Circular],
                  "config": {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": undefined,
                  },
                  "fuzzySubtypes": Map {},
                  "rootIdsByTypename": {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "supertypeMap": Map {},
                  "toBeAdded": {},
                  "typePolicies": {},
                  "usingPossibleTypes": false,
                },
                "refs": {},
                "replay": [Function],
                "rootIds": {},
                "toReference": [Function],
              },
              "toReference": [Function],
            },
            "getFragmentDoc": [Function],
            "makeVar": [Function],
            "maybeBroadcastWatch": [Function],
            "optimisticData": Stump {
              "canRead": [Function],
              "data": {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": Trie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "parent": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "parent": null,
                },
              },
              "id": "EntityStore.Stump",
              "parent": Root {
                "canRead": [Function],
                "data": {},
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "parent": null,
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": undefined,
                  },
                  "fuzzySubtypes": Map {},
                  "rootIdsByTypename": {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "supertypeMap": Map {},
                  "toBeAdded": {},
                  "typePolicies": {},
                  "usingPossibleTypes": false,
                },
                "refs": {},
                "rootIds": {},
                "storageTrie": Trie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "stump": [Circular],
                "toReference": [Function],
              },
              "policies": Policies {
                "cache": [Circular],
                "config": {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": undefined,
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": {},
                "typePolicies": {},
                "usingPossibleTypes": false,
              },
              "refs": {},
              "replay": [Function],
              "rootIds": {},
              "toReference": [Function],
            },
            "policies": Policies {
              "cache": [Circular],
              "config": {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": undefined,
              },
              "fuzzySubtypes": Map {},
              "rootIdsByTypename": {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "supertypeMap": Map {},
              "toBeAdded": {},
              "typePolicies": {},
              "usingPossibleTypes": false,
            },
            "storeReader": StoreReader {
              "canon": ObjectCanon {
                "empty": {},
                "keysByJSON": Map {
                  "[]" => {
                    "json": "[]",
                    "sorted": [],
                  },
                },
                "known": WeakSet {},
                "passes": WeakMap {},
                "pool": Trie {
                  "data": {
                    "keys": {
                      "json": "[]",
                      "sorted": [],
                    },
                  },
                  "makeData": [Function],
                  "weak": WeakMap {},
                  "weakness": true,
                },
              },
              "config": {
                "addTypename": true,
                "cache": [Circular],
                "canonizeResults": false,
              },
              "executeSelectionSet": [Function],
              "executeSubSelectedArray": [Function],
              "knownResults": WeakMap {},
            },
            "storeWriter": StoreWriter {
              "cache": [Circular],
              "fragments": undefined,
              "reader": StoreReader {
                "canon": ObjectCanon {
                  "empty": {},
                  "keysByJSON": Map {
                    "[]" => {
                      "json": "[]",
                      "sorted": [],
                    },
                  },
                  "known": WeakSet {},
                  "passes": WeakMap {},
                  "pool": Trie {
                    "data": {
                      "keys": {
                        "json": "[]",
                        "sorted": [],
                      },
                    },
                    "makeData": [Function],
                    "weak": WeakMap {},
                    "weakness": true,
                  },
                },
                "config": {
                  "addTypename": true,
                  "cache": [Circular],
                  "canonizeResults": false,
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
            },
            "txCount": 0,
            "watches": Set {},
          },
          "clientAwareness": {
            "name": undefined,
            "version": undefined,
          },
          "defaultOptions": {},
          "documentTransform": DocumentTransform {
            "resultCache": WeakSet {},
            "transform": [Function],
          },
          "fetchCancelFns": Map {},
          "inFlightLinkObservables": Map {},
          "link": HttpLink {
            "options": {
              "credentials": undefined,
              "headers": undefined,
              "uri": "https://countries.trevorblades.com/graphql",
            },
            "request": [Function],
          },
          "localState": LocalState {
            "cache": InMemoryCache {
              "addTypename": true,
              "addTypenameTransform": DocumentTransform {
                "resultCache": WeakSet {},
                "stableCacheKeys": Trie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "transform": [Function],
              },
              "assumeImmutableResults": true,
              "config": {
                "addTypename": true,
                "canonizeResults": false,
                "dataIdFromObject": [Function],
                "resultCaching": true,
              },
              "data": Root {
                "canRead": [Function],
                "data": {},
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "parent": null,
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": undefined,
                  },
                  "fuzzySubtypes": Map {},
                  "rootIdsByTypename": {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "supertypeMap": Map {},
                  "toBeAdded": {},
                  "typePolicies": {},
                  "usingPossibleTypes": false,
                },
                "refs": {},
                "rootIds": {},
                "storageTrie": Trie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "stump": Stump {
                  "canRead": [Function],
                  "data": {},
                  "getFieldValue": [Function],
                  "group": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "parent": CacheGroup {
                      "caching": true,
                      "d": [Function],
                      "keyMaker": Trie {
                        "makeData": [Function],
                        "weakness": true,
                      },
                      "parent": null,
                    },
                  },
                  "id": "EntityStore.Stump",
                  "parent": [Circular],
                  "policies": Policies {
                    "cache": [Circular],
                    "config": {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": undefined,
                    },
                    "fuzzySubtypes": Map {},
                    "rootIdsByTypename": {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "supertypeMap": Map {},
                    "toBeAdded": {},
                    "typePolicies": {},
                    "usingPossibleTypes": false,
                  },
                  "refs": {},
                  "replay": [Function],
                  "rootIds": {},
                  "toReference": [Function],
                },
                "toReference": [Function],
              },
              "getFragmentDoc": [Function],
              "makeVar": [Function],
              "maybeBroadcastWatch": [Function],
              "optimisticData": Stump {
                "canRead": [Function],
                "data": {},
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "parent": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "parent": null,
                  },
                },
                "id": "EntityStore.Stump",
                "parent": Root {
                  "canRead": [Function],
                  "data": {},
                  "getFieldValue": [Function],
                  "group": CacheGroup {
                    "caching": true,
                    "d": [Function],
                    "keyMaker": Trie {
                      "makeData": [Function],
                      "weakness": true,
                    },
                    "parent": null,
                  },
                  "policies": Policies {
                    "cache": [Circular],
                    "config": {
                      "cache": [Circular],
                      "dataIdFromObject": [Function],
                      "possibleTypes": undefined,
                      "typePolicies": undefined,
                    },
                    "fuzzySubtypes": Map {},
                    "rootIdsByTypename": {
                      "Mutation": "ROOT_MUTATION",
                      "Query": "ROOT_QUERY",
                      "Subscription": "ROOT_SUBSCRIPTION",
                    },
                    "rootTypenamesById": {
                      "ROOT_MUTATION": "Mutation",
                      "ROOT_QUERY": "Query",
                      "ROOT_SUBSCRIPTION": "Subscription",
                    },
                    "supertypeMap": Map {},
                    "toBeAdded": {},
                    "typePolicies": {},
                    "usingPossibleTypes": false,
                  },
                  "refs": {},
                  "rootIds": {},
                  "storageTrie": Trie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                  "stump": [Circular],
                  "toReference": [Function],
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": undefined,
                  },
                  "fuzzySubtypes": Map {},
                  "rootIdsByTypename": {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "supertypeMap": Map {},
                  "toBeAdded": {},
                  "typePolicies": {},
                  "usingPossibleTypes": false,
                },
                "refs": {},
                "replay": [Function],
                "rootIds": {},
                "toReference": [Function],
              },
              "policies": Policies {
                "cache": [Circular],
                "config": {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": undefined,
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": {},
                "typePolicies": {},
                "usingPossibleTypes": false,
              },
              "storeReader": StoreReader {
                "canon": ObjectCanon {
                  "empty": {},
                  "keysByJSON": Map {
                    "[]" => {
                      "json": "[]",
                      "sorted": [],
                    },
                  },
                  "known": WeakSet {},
                  "passes": WeakMap {},
                  "pool": Trie {
                    "data": {
                      "keys": {
                        "json": "[]",
                        "sorted": [],
                      },
                    },
                    "makeData": [Function],
                    "weak": WeakMap {},
                    "weakness": true,
                  },
                },
                "config": {
                  "addTypename": true,
                  "cache": [Circular],
                  "canonizeResults": false,
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
              "storeWriter": StoreWriter {
                "cache": [Circular],
                "fragments": undefined,
                "reader": StoreReader {
                  "canon": ObjectCanon {
                    "empty": {},
                    "keysByJSON": Map {
                      "[]" => {
                        "json": "[]",
                        "sorted": [],
                      },
                    },
                    "known": WeakSet {},
                    "passes": WeakMap {},
                    "pool": Trie {
                      "data": {
                        "keys": {
                          "json": "[]",
                          "sorted": [],
                        },
                      },
                      "makeData": [Function],
                      "weak": WeakMap {},
                      "weakness": true,
                    },
                  },
                  "config": {
                    "addTypename": true,
                    "cache": [Circular],
                    "canonizeResults": false,
                  },
                  "executeSelectionSet": [Function],
                  "executeSubSelectedArray": [Function],
                  "knownResults": WeakMap {},
                },
              },
              "txCount": 0,
              "watches": Set {},
            },
            "client": [Circular],
            "selectionsToResolveCache": WeakMap {},
          },
          "mutationIdCounter": 1,
          "mutationStore": {},
          "onBroadcast": [Function],
          "queries": Map {},
          "queryDeduplication": true,
          "queryIdCounter": 1,
          "requestIdCounter": 1,
          "ssrMode": false,
          "transformCache": WeakMap {},
        },
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": [],
        "typeDefs": undefined,
        "version": "3.8.1",
        "watchQuery": [Function],
      }
    }
  >
    <ForwardRef(NavigationContainerInner)
      linking={
        {
          "config": {
            "screens": {
              "Continent": "continent/:code",
              "Home": "",
            },
          },
          "prefixes": [],
        }
      }
    >
      <mockConstructor
        screenOptions={
          {
            "headerShown": false,
          }
        }
      >
        <mockConstructor
          component={[Function]}
          name="Home"
        />
        <mockConstructor
          component={[Function]}
          name="Continent"
        />
      </mockConstructor>
    </ForwardRef(NavigationContainerInner)>
  </ApolloProvider>
</SafeAreaProvider>
`;
